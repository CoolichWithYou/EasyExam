Множественное наследование

Множественное наследование позволяет одному дочернему классу иметь несколько родителей. Предположим, что мы хотим 
написать программу для отслеживания работы учителей. Учитель — это Human. Тем не менее, он также является 
Сотрудником (Employee).

Множественное наследование может быть использовано для создания класса Teacher, который будет наследовать свойства 
как Human, так и Employee. Для использования множественного наследования нужно просто указать через запятую тип 
наследования и второй родительский класс:

#include <string>
 
class Human
{
private:
    std::string m_name;
    int m_age;
 
public:
    Human(std::string name, int age)
        : m_name(name), m_age(age)
    {
    }
 
    std::string getName() { return m_name; }
    int getAge() { return m_age; }
};
 
class Employee
{
private:
    std::string m_employer;
    double m_wage;
 
public:
    Employee(std::string employer, double wage)
        : m_employer(employer), m_wage(wage)
    {
    }
 
    std::string getEmployer() { return m_employer; }
    double getWage() { return m_wage; }
};
 
// Класс Teacher открыто наследует свойства классов Human и Employee
class Teacher: public Human, public Employee
{
private:
     int m_teachesGrade;
 
public:
    Teacher(std::string name, int age, std::string employer, double wage, int teachesGrade)
        : Human(name, age), Employee(employer, wage), m_teachesGrade(teachesGrade)
    {
    }
};

Проблемы с множественным наследованием:

Хотя множественное наследование кажется простым расширением одиночного наследования, оно 
может привести к множеству проблем, которые могут заметно увеличить сложность программ и 
сделать кошмаром дальнейшую поддержку кода. Рассмотрим некоторые из подобных ситуаций.

Во-первых, может возникнуть неоднозначность, когда несколько родительских классов имеют 
метод с одним и тем же именем, например:
При компиляции c54G.getID() компилятор смотрит, есть ли у WirelessAdapter метод getID(). 
Этого метода у него нет, поэтому компилятор двигается по цепочке наследования вверх и 
смотрит, есть ли этот метод в каком-либо из родительских классов. И здесь возникает 
проблема — getID() есть как у USBDevice, так и у NetworkDevice. Следовательно, вызов 
этого метода приведет к неоднозначности и мы получим ошибку, так как компилятор не 
будет знать какую версию getID() ему вызывать.

Тем не менее, есть способ обойти эту проблему. Мы можем явно указать, какую версию 
getID() следует вызывать:

int main()
{
    WirelessAdapter c54G(6334, 292651);
    std::cout << c54G.USBDevice::getID();
 
    return 0;
}

Хотя это решение довольно простое, но всё может стать намного сложнее, если наш класс 
будет иметь от 4-х родительских классов, которые, в свою очередь, будут иметь свои 
родительские классы. Возможность возникновения конфликтов имен увеличивается 
экспоненциально с каждым добавленным родительским классом, и в каждом из таких 
случаев нужно будет явно указывать версии методов, которые следует вызывать, 
дабы избежать возможности возникновения конфликтов имен.

Во-вторых, более серьезной проблемой является «алмаз смерти» (или «алмаз обреченности»). 
Это ситуация, когда один класс имеет 2 родительских класса, каждый из которых, в свою 
очередь, наследует свойства одного и того же родительского класса. Иллюстративно мы 
получаем форму алмаза.

Например, рассмотрим следующие классы:

class PoweredDevice
{
};
 
class Scanner: public PoweredDevice
{
};
 
class Printer: public PoweredDevice
{
};
 
class Copier: public Scanner, public Printer
{
};

Сканеры и принтеры — это устройства, которые получают питание от розетки, поэтому они 
наследуют свойства PoweredDevice. Однако ксерокс (Copier) включает в себя функции как 
сканеров, так и принтеров.

