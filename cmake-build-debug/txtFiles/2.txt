Процесс разработки программного обеспечения с использованием ООП включает четыре этапа: анализ, проектирование, 
эволюция, модификация.

А н а л и з 

Цель анализа - максимально полное описание задачи. На этом этапе выполняется анализ предметной области задачи, 
объектная декомпозиция разрабатываемой системы и определяются важнейшие особенности поведения объектов 
(описание абстракций). По результатам анализа разрабатывается структурная схема программного продукта, 
на которой показываются основные объекты и сообщения, передаваемые между ними, а также выполняется описание 
абстракций.

П р о е к т и р о в а н и е

Различают:
логическое проектирование, при котором принимаемые решения практически не зависят от условий эксплуатации 
(операционной системы и используемого оборудования);

физическое проектирование, при котором приходится принимать во внимание указанные факторы.

Логическое проектирование заключается в разработке структуры классов:
определяются поля для хранения составляющих состояния объектов и алгоритмы методов, реализующих аспекты 
поведения объектов. При этом используются рассмотренные выше приемы разработки классов (наследование,
композиция, наполнение, полиморфизм и т.д.). Результатом является иерархия или диаграмма классов, отражающие 
взаимосвязь классов, и описание классов.

Физическое проектирование включает объединение описаний классов в модули, выбор схемы их подключения 
(статическая или динамическая компоновка), определение способов взаимодействия с оборудованием, с
операционной системой и/или другим программным обеспечением (например, базами данных, сетевыми программами), 
обеспечение синхронизации процессов для систем параллельной обработки и т.д.

Э в о л ю ц и я с и с т е м ы

Это процесс поэтапной реализации и

подключения классов к проекту. Процесс начинается с создания основной программы или проекта будущего 
программного продукта. Затем реализуются и подключаются классы, так чтобы создать грубый, но, по возможности,
работающий прототип будущей системы. Он тестируется и отлаживается. Например, таким прототипом может служить 
система, включающая реализацию основного интерфейса программного продукта (передача сообщений в отсутствующую 
пока часть системы не выполняется). В результате мы получаем работоспособный прототип продукта, который может 
быть, например, показан заказчику для уточнения требований. Затем к системе подключается следующая группа 
классов, например, связанная с реализацией некоторого пункта меню.

Полученный вариант также тестируется и отлаживается, и так далее, до реализации всех возможностей системы.

Использование поэтапной реализации существенно упрощает тестирование и отладку программного продукта.

М о д и ф и к а ц и я

Это процесс добавления новых функциональных возможностей или изменение существующих свойств системы. Как правило,
изменения затрагивают реализацию класса, оставляя без изменения его интерфейс, что при использовании ООП обычно 
обходится без особых неприятностей, так как процесс изменений затрагивает локальную область.
Изменение интерфейса - также не очень сложная задача, но ее решение может повлечь за собой необходимость 
согласования процессов взаимодействия объектов, что потребует изменений в других классах программы. Однако 
сокращение количества параметров в интерфейсной части по сравнению с модульным программированием существенно 
облегчает и этот процесс.

Простота модификации позволяет сравнительно легко адаптировать программные системы к изменяющимся условиям 
эксплуатации, что увеличивает время жизни систем, на разработку которых затрачиваются огромные временные и 
материальные ресурсы.

