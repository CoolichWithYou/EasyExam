Основное достоинство ООП - сокращение количества межмодульных вызовов и уменьшение объемов информации, передаваемой 
между модулями, по сравнению с модульным программированием. Это достигается за счет более полной локализации данных и 
интегрирования их с подпрограммами обработки, что позволяет вести практически независимую разработку отдельных частей
(объектов) программы.

Кроме этого, объектный подход предлагает новые технологические средства разработки, такие как наследование, 
полиморфизм, композиция, наполнение,позволяющие конструировать сложные объекты из более простых. В результате 
существенно увеличивается показатель повторного использования кодов,появляется возможность создания библиотек 
объектов для различных применений, и разработчикам предоставляются дополнительные возможности создания систем 
повышенной сложности.

В основу ООП положены следующие п р и н ц и п ы : абстрагирование,ограничение доступа, модульность, иерархичность, 
типизация, параллелизм, устойчивость.

А б с т р а г и р о в а н и е

процесс выделения абстракций в предметной области задачи. Абстракция - совокупность существенных характеристик 
некоторого объекта, которые отличают его от всех других видов объектов и, таким образом, четко определяют особенности 
данного объекта с точки зрения дальнейшего рассмотрения и анализа. В соответствии с определением применяемая 
абстракция реального предмета существенно зависит от решаемой задачи: в одном случае нас будет интересовать форма 
предмета, в другом вес, в третьем - материалы, из которых он сделан, в четвертом - закон движения предмета и т.д. 
Современный уровень абстракции предполагает объединение всех свойств абстракции (как касающихся состояния анализируемого 
объекта, так и определяющих его поведение) в единую программную единицу некий абстрактный тип (класс).


О г р а н и ч е н н о с т ь д о с т у п а

сокрытие отдельных элементов реализации абстракции, не затрагивающих существенных характеристик ее как целого.
Необходимость ограничения доступа предполагает разграничение двух частей в описании абстракции:
интерфейс - совокупность доступных извне элементов реализации абстракции (основные характеристики состояния и поведения);
реализация - совокупность недоступных извне элементов реализации абстракции (внутренняя организация абстракции и 
механизмы реализации ее поведения).

М о д у л ь н о с т ь

принцип разработки программной системы, предполагающий реализацию ее в виде отдельных частей (модулей). При выполнении 
декомпозиции системы на модули желательно объединять логически связанные части, по возможности обеспечивая сокращение 
количества внешних связей между модулями. Принцип унаследован от модульного программирования, следование ему упрощает 
проектирование и отладку программы.

И е р а р х и я

ранжированная или упорядоченная система абстракций.Принцип иерархичности предполагает использование иерархий при 
разработке программных систем. В ООП используются два вида иерархии.

Иерархия «целое/часть» - показывает, что некоторые абстракции включены

в рассматриваемую абстракцию как ее части, например, лампа состоит из цоколя, нити накаливания и колбы. Этот вариант 
иерархии используется в процессе разбиения системы на разных этапах проектирования (на логическом уровне - при 
декомпозиции предметной области на объекты, на физическом уровне - при декомпозиции системы на модули и при выделении 
отдельных процессов в мультипроцессной системе).

Иерархия «общее/частное» -показывает, что некоторая абстракция является частным случаем другой абстракции, например, 
« обеденный стол - конкретный вид стола», а « столы - конкретный вид мебели». Используется приразработке структуры 
классов, когда сложные классы строятся на базе более простых путем добавления к ним новых характеристик и, возможно, 
уточнения имеющихся.

Т и п и з а ц и я
ограничение, накладываемое на свойства объектов и препятствующее взаимозаменяемости абстракций различных типов 
(или сильно сужающее возможность такой замены). В языках с жесткой типизацией для каждого программного объекта 
(переменной, подпрограммы, параметра и т. д.) объявляется тип, который определяет множество операций над соответствующим 
программным объектом. Рассматриваемые далее языки программирования на основе Паскаля используют строгую, а на основе 
С - среднюю степень типизации.

Использование принципа типизации обеспечивает:

∙раннее обнаружение ошибок, связанных с недопустимыми операциями над программными объектами (ошибки обнаруживаются на 
этапе компиляции программы при проверке допустимости выполнения данной операции над программным объектом);

∙упрощение документирования;

∙возможность генерации более эффективного кода.

Тип может связываться с программным объектом статически (тип объекта определен на этапе компиляции - раннее связывание) 
и динамически (тип объекта определяется только во время выполнения программы - позднее связывание). Реализация позднего 
связывания в языке программирования позволяет создавать переменные - указатели на объекты, принадлежащие различным 
классам (полиморфные объекты), что существенно расширяет возможности языка.

П а р а л л е л и з м

войство нескольких абстракций одновременно находиться в активном состоянии, т.е. выполнять некоторые операции. Существует 
целый ряд задач, решение которых требует одновременного выполнения некоторых последовательностей действий. К таким задачам,
например, относятся задачи автоматического управления несколькими процессами.

Реальный параллелизм достигается только при реализации задач такого типа на многопроцессорных системах, когда имеется 
возможность выполнения каждого процесса отдельным процессором. Системы с одним процессором имитируют параллелизм за счет 
разделения времени процессора между задачами управления различными процессами. В зависимости от типа используемой 
операционной системы (одноили мультипрограммной) разделение времени может выполняться либо разрабатываемой системой (как в MS DOS), 
либо используемой ОС (как в системах Windows).


У с т о й ч и в о с т ь
свойство абстракции существовать во времени независимо от процесса, породившего данный программный объект, и/или в пространстве, 
перемещаясь из адресного пространства, в котором он был создан.

Различают:

∙временные объекты, хранящие промежуточные результаты некоторых действий, например вычислений;

∙локальные объекты, существующие внутри подпрограмм, время жизни которых исчисляется от вызова подпрограммы до ее завершения;

∙глобальные объекты, существующие пока программа загружена в память;

∙сохраняемые объекты, данные которых хранятся в файлах внешней памяти между сеансами работы программы.

Все указанные выше принципы в той или иной степени реализованы в различных версиях объектно-ориентированных языков.

